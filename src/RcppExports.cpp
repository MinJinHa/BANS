// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// crossprodCpp
Eigen::MatrixXd crossprodCpp(const Eigen::MatrixXd B, const Eigen::MatrixXd C);
RcppExport SEXP _BANS_crossprodCpp(SEXP BSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(crossprodCpp(B, C));
    return rcpp_result_gen;
END_RCPP
}
// dmvnrm_arma
arma::vec dmvnrm_arma(arma::mat x, arma::rowvec mean, arma::mat sigma, bool logd);
RcppExport SEXP _BANS_dmvnrm_arma(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnrm_arma(x, mean, sigma, logd));
    return rcpp_result_gen;
END_RCPP
}
// prodCpp
Eigen::MatrixXd prodCpp(const Eigen::MatrixXd B, const Eigen::MatrixXd C);
RcppExport SEXP _BANS_prodCpp(SEXP BSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(prodCpp(B, C));
    return rcpp_result_gen;
END_RCPP
}
// rmvnrm_arma
arma::mat rmvnrm_arma(int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP _BANS_rmvnrm_arma(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnrm_arma(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// tCpp
Eigen::MatrixXd tCpp(const Eigen::MatrixXd A);
RcppExport SEXP _BANS_tCpp(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(tCpp(A));
    return rcpp_result_gen;
END_RCPP
}
// tcrossprodCpp
Eigen::MatrixXd tcrossprodCpp(const Eigen::MatrixXd B, const Eigen::MatrixXd C);
RcppExport SEXP _BANS_tcrossprodCpp(SEXP BSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(tcrossprodCpp(B, C));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BANS_crossprodCpp", (DL_FUNC) &_BANS_crossprodCpp, 2},
    {"_BANS_dmvnrm_arma", (DL_FUNC) &_BANS_dmvnrm_arma, 4},
    {"_BANS_prodCpp", (DL_FUNC) &_BANS_prodCpp, 2},
    {"_BANS_rmvnrm_arma", (DL_FUNC) &_BANS_rmvnrm_arma, 3},
    {"_BANS_tCpp", (DL_FUNC) &_BANS_tCpp, 1},
    {"_BANS_tcrossprodCpp", (DL_FUNC) &_BANS_tcrossprodCpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_BANS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
